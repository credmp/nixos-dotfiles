;;; Compiled snippets and support files for `c++-mode'
;;; contents of the .yas-setup.el support file:
;;;
(defun doom-snippets-c++-using-std-p ()
  "Return non-nil if 'using namespace std' is found at the top of this file."
  (save-excursion
    (goto-char (point-max))
    (or (search-forward "using namespace std;" 512 t)
        (search-forward "std::" 1024 t))))

(defun doom-snippets-c++-class-name (str)
  "Search for a class name like `DerivedClass' in STR
(which may look like `DerivedClass : ParentClass1, ParentClass2, ...')
If found, the class name is returned, otherwise STR is returned"
  (yas-substr str "[^: ]*"))

(defun doom-snippets-c++-class-method-decl-choice ()
  "Choose and return the end of a C++11 class method declaration"
  (yas-choose-value '(";" " = default;" " = delete;")))
;;; Snippet definitions:
;;;
(yas-define-snippets 'c++-mode
										 '(("vec" "`(setq --cpp-ns (if (doom-snippets-c++-using-std-p) \"\" \"std::\"))\n--cpp-ns`vector<${1:type}> ${2:var}${3:(${4:10}, $1($5))};" "vector" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/vector" nil "vec")
											 ("using" "using namespace ${std};" "using namespace ..." nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/using" nil "using")
											 ("ucp" "std::unique_copy(std::begin(${1:container}), std::end($1),\n  std::ostream_iterator<string>(std::cout, \"\\n\"));" "unique_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/unique_copy" nil nil)
											 ("uqe" "auto pos = std::unique(std::begin(${1:container}), std::end($1));" "unique" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/unique" nil nil)
											 ("tryw" "try {\n    `(or yas/selected-text (car kill-ring))`\n} catch ${1:Exception} {\n\n}\n" "tryw" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/tryw" nil "tryw")
											 ("try" "try {\n    `%`$0\n} catch (${1:type}) {\n\n}\n" "try" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/try" nil nil)
											 ("ltr" "${1:container}.erase(0, $1.find_first_not_of(\" \\t\\n\\r\"));" "remove whitespace at beginning" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/trim_left" nil nil)
											 ("lwr" "std::transform(std::begin(${1:container}), std::end($1), std::begin($1), [](char c) {\n  `(or (concat % \"\\n\") \"\")`return std::tolower(c);\n});" "string to lower case" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/transform_lowercase" nil nil)
											 ("upr" "std::transform(std::begin(${1:container}), std::end($1), std::begin($1), [](char c) {\n  `(or (concat % \"\\n\") \"\")`return std::toupper(c);\n});" "transform" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/transform-with-closure" nil nil)
											 ("tfm" "std::transform(std::begin(${1:container}), std::end($1),\n  std::begin($1), []($2) {\n$3%\n});\n$0\n" "transform" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/transform" nil nil)
											 ("throw" "throw ${1:MyError}($0);" "throw" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/throw" nil "throw")
											 ("this" "this" "this" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/this" nil nil)
											 ("ts" "BOOST_AUTO_TEST_SUITE( ${1:test_suite1} )\n\n$0\n\nBOOST_AUTO_TEST_SUITE_END()" "test_suite" nil
												("testing")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/test_suite" nil "ts")
											 ("test_main" "int main(int argc, char **argv) {\n      ::testing::InitGoogleTest(&argc, argv);\n       return RUN_ALL_TESTS();\n}" "test_main" nil
												("testing")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/test_main" nil "test_main")
											 ("tc" "BOOST_AUTO_TEST_CASE( ${1:test_case} )\n{\n        $0\n}" "test case" nil
												("testing")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/test case" nil "tc")
											 ("temp" "template<${1:$$(yas/choose-value '(\"typename\" \"class\"))} ${2:T}>\n$0" "template" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/template" nil "temp")
											 ("swr" "std::swap_ranges(std::begin(${1:container}), std::end($1), std::begin($2));" "swap_ranges" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/swap_ranges" nil nil)
											 ("st" "std::$0" "std::" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/std_colon" nil "st")
											 ("std" "using namespace std;" "std" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/std" nil "std")
											 ("sts" "std::stable_sort(std::begin(${1:container}), std::end($1));" "stable_sort" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/stable_sort" nil nil)
											 ("spt" "auto pos = std::stable_partition(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});\nif (pos != std::end($1)) {\n  $4\n}" "stable_partition" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/stable_partition" nil nil)
											 ("sth" "std::sort_heap(std::begin(${1:container}), std::end($1));" "sort_heap" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/sort_heap" nil nil)
											 ("srt" "std::sort(std::begin(${1:container}), std::end($1));" "sort" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/sort" nil nil)
											 ("srn" "auto pos = std::search_n(std::begin(${1:container}), std::end($1),$2,$3);\nif (pos != std::end($1)) {\n  `%`$4\n}" "search_n" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/search_n" nil nil)
											 ("srh" "auto pos = std::search(std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3));\nif (pos != std::end($1)) {\n  `%`$4\n}" "search" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/search" nil nil)
											 ("rtc" "std::rotate_copy(std::begin(${1:container}), std::begin($2), std::end($1), std::begin($3));" "rotate_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/rotate_copy" nil nil)
											 ("rte" "std::rotate(std::begin(${1:container}), std::begin($2), std::end($1));" "rotate" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/rotate" nil nil)
											 ("rvc" "std::reverse_copy(std::begin(${1:container}), std::end($1), std::begin($2));" "reverse_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/reverse_copy" nil nil)
											 ("rvr" "std::reverse(std::begin(${1:container}), std::end($1));" "reverse" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/reverse" nil nil)
											 ("rpi" "std::replace_if(\n  std::begin(${1:container}),\n  std::end($1), []($2) {\n    `%`$3\n  },\n  $4\n);" "replace_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/replace_if" nil nil)
											 ("rci" "std::replace_copy_if(\n  std::begin(${1:container}),\n  std::end($1),\n  std::begin($1), []($2) {\n    `%`$3\n  },\n  $4\n);" "replace_copy_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/replace_copy_if" nil nil)
											 ("rpc" "std::replace_copy(std::begin(${1:container}), std::end($1), std::begin($1), $2, $3);" "replace_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/replace_copy" nil nil)
											 ("rpl" "std::replace(std::begin(${1:container}), std::end($1), $2, $3);" "replace" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/replace" nil nil)
											 ("rmi" "auto pos = std::remove_if(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});\nif (pos != std::end($1)) {\n  $4\n}" "remove_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/remove_if" nil nil)
											 ("rmf" "std::remove_copy_if(std::begin(${1:container}), std::end($1),\n  std::begin($1), []($2) {\n    `%`$3\n  }\n);" "remove_copy_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/remove_copy_if" nil nil)
											 ("rmc" "std::remove_copy(std::begin(${1:container}), std::end($1),\n  std::begin($1), $2);" "remove_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/remove_copy" nil nil)
											 ("rmv" "auto pos = std::remove(std::begin(${1:container}), std::end($1), $2);\nif (pos != std::end($1)) {\n  `%`$3\n}" "remove" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/remove" nil nil)
											 ("shf" "std::random_shuffle(std::begin(${1:container}), std::end($1));" "random_shuffle" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/random_shuffle" nil nil)
											 ("phh" "std::push_heap(std::begin(${1:container}), std::end($1));" "push_heap" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/push_heap" nil nil)
											 ("public" "public:\n    $0" "public" nil nil
												((yas-also-auto-indent-first-line t))
												"/home/arjen/.config/emacs/snippets/c++-mode/public" nil nil)
											 ("protected" "protected:\n    $0" "protected" nil nil
												((yas-also-auto-indent-first-line t))
												"/home/arjen/.config/emacs/snippets/c++-mode/protected" nil nil)
											 ("private" "private:\n    $0" "private" nil nil
												((yas-also-auto-indent-first-line t))
												"/home/arjen/.config/emacs/snippets/c++-mode/private" nil nil)
											 ("prp" "if (std::prev_permutation(std::begin(${1:container}), std::end($1))) {\n  `%`$2\n}" "prev_permutation" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/prev_permutation" nil nil)
											 ("ppt" "auto pos = std::partition_point(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});\nif (pos != std::end($1)) {\n  $4\n}" "partition_point" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/partition_point" nil nil)
											 ("ptc" "std::partition_copy(std::begin(${1:container}), std::end($1),\n                    std::begin($2), std::end($3));" "partition_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/partition_copy" nil nil)
											 ("ptn" "auto pos = std::partition(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});\nif (pos != std::end($1)) {\n  $4\n}" "partition" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/partition" nil nil)
											 ("psc" "std::partial_sort_copy(std::begin(${1:container}), std::end($1),\n                       std::begin($2), std::end($3));" "partial_sort_copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/partial_sort_copy" nil nil)
											 ("pst" "std::partial_sort(std::begin(${1:container}), std::end($1), std::end($1));" "partial_sort" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/partial_sort" nil nil)
											 ("pack" "void cNetCommBuffer::pack(${1:type}) {\n\n}\n\n$0" "pack" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/pack" nil "pack")
											 ("os" "#include <ostream>" "ostream" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/ostream" nil "os")
											 ("<<" "std::ostream& operator<<(std::ostream& s, const ${1:type}& ${2:c})\n{\n         $0\n         return s;\n}" "operator<<" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator_ostream" nil "<<")
											 (">>" "istream& operator>>(istream& s, const ${1:type}& ${2:c})\n{\n         $0\n}\n" "operator>>" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator_istream" nil ">>")
											 ("[]" "${1:Type}& operator[](${2:int index})\n{\n        $0\n}" "operator[]" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator[]" nil "[]")
											 ("==" "bool ${1:MyClass}::operator==(const $1 &other) const {\n     $0\n}" "operator==" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator==" nil "==")
											 ("=" "${1:MyClass}& $1::operator=(const $1 &rhs) {\n    // Check for self-assignment!\n    if (this == &rhs)\n      return *this;\n    $0\n    return *this;\n}" "operator=" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator=" nil "=")
											 ("+=" "${1:MyClass}& $1::operator+=(${2:const $1 &rhs})\n{\n  $0\n  return *this;\n}" "operator+=" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator+=" nil "+=")
											 ("+" "${1:MyClass} $1::operator+(const $1 &other)\n{\n    $1 result = *this;\n    result += other;\n    return result;\n}" "operator+" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator+" nil "+")
											 ("!=" "bool ${1:MyClass}::operator!=(const $1 &other) const {\n    return !(*this == other);\n}" "operator!=" nil
												("operator overloading")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/operator!=" nil "!=")
											 ("nth" "std::nth_element(std::begin(${1:container}), std::end($1), std::end($1));" "nth_element" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/nth_element" nil nil)
											 ("nno" "if (std::none_of(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n})) {\n  $4\n}" "none_of" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/none_of" nil nil)
											 ("nxp" "if (std::next_permutation(std::begin(${1:container}), std::end($1))) {\n  `%`$2\n}" "next_permutation" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/next_permutation" nil nil)
											 ("nss" "namespace ${1:name} {\n  `%`$0\n}" "namespace" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/namespace_block" nil nil)
											 ("ns" "namespace ${1:name}" "namespace ..." nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/namespace" nil "ns")
											 ("mpb" "std::move_backward(std::begin(${1:container}), std::end($1), std::end($1));" "move_backward" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/move_backward" nil nil)
											 ("mod" "class ${1:Class} : public cSimpleModule\n{\n   $0\n}" "module" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/module" nil "mod")
											 ("msm" "auto values = std::mismatch(std::begin(${1:container}), std::end($1), std::begin($1));\nif (values.first == std::end($1)) {\n  `%`$2\n} else {\n  $3\n}" "mismatch" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/mismatch" nil nil)
											 ("mme" "auto minmax = std::minmax_element(std::begin(${1:container}), std::end($1));" "minmax_element" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/minmax_element" nil nil)
											 ("mne" "auto pos = std::min_element(std::begin(${1:container}), std::end($1));" "min_element" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/min_element" nil nil)
											 ("mrg" "std::merge(std::begin(${1:container}), std::end($1),\nstd::begin($2), std::end($3), std::begin($4));" "merge" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/merge" nil nil)
											 ("mf" "${1:type} ${2:Name}::${3:name}(${4:args})${5: const}\n{\n        $0\n}\n" "member_function" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/member_function" nil nil)
											 ("mxe" "auto pos = std::max_element(std::begin(${1:container}), std::end($1));" "max_element" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/max_element" nil nil)
											 ("map" "std::map<${1:type1}$0> ${2:var};" "map" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/map" nil "map")
											 ("mkh" "std::make_heap(std::begin(${1:container}), std::end($1));" "make_heap" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/make_heap" nil nil)
											 ("lxc" "if (std::lexigraphical_compare(std::begin(${1:container}), std::end($1), std::begin($2), std::end($3))) {\n  `%`$4\n}" "lexigraphical_compare" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/lexigraphical_compare" nil nil)
											 ("lam" "[$1]($2) { `(!%!)`$3 }" "lambda" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/lambda" nil nil)
											 ("iter" "${1:std::}${2:vector<int>}::iterator ${3:iter};\n" "iterator" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/iterator" nil "iter")
											 ("isu" "auto pos = std::is_sorted_until(std::begin(${1:container}), std::end($1));\nif (pos != std::end($1)) {\n  `%`$2\n}" "is_sorted_until" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/is_sorted_until" nil nil)
											 ("iss" "if (std::is_sorted(std::begin(${1:container}), std::end($1))) {\n  `%`$2\n}" "is_sorted" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/is_sorted" nil nil)
											 ("ipr" "if (std::is_permutation(std::begin(${1:container}), std::end($1), std::begin($2))) {\n  `%`$3\n}" "is_permutation" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/is_permutation" nil nil)
											 ("ipt" "if (std::is_partitioned(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n})) {\n  $4\n}" "is_partitioned" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/is_partitioned" nil nil)
											 ("ihu" "auto pos = std::is_heap_until(std::begin(${1:container}), std::end($1));\nif (pos != std::end($1)) {\n  `%`$2\n}" "is_heap_until" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/is_heap_until" nil nil)
											 ("ihp" "if (std::is_heap(std::begin(${1:container}), std::end($1))) {\n  `%`$2\n}" "is_heap" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/is_heap" nil nil)
											 ("ita" "std::iota(std::begin(${1:container}), std::end($1), $2);" "iota" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/iota" nil nil)
											 ("il" "inline $0" "inline" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/inline" nil "il")
											 ("istr" "#include <string>" "#include <string>" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/include_string" nil "istr")
											 ("iss" "#include <sstream>" "#include <sstream>" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/include_sstream" nil "iss")
											 ("iio" "#include <iostream>" "#include <iostream>" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/include_iostream" nil "iio")
											 ("inch" "#include \"`(file-name-nondirectory (file-name-sans-extension (or (doom-snippets-text) (buffer-file-name) )))`.h\"" "#include \"{self}.h\"" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/include_header" nil nil)
											 ("inc" "#include <`%`${1:lib}>" "#include <lib>" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/include" nil nil)
											 ("ignore" "${1:std::}cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');" "ignore" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/ignore" nil "ignore")
											 ("gtest" "#include <gtest/gtest.h>" "gtest" nil
												("testing")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/gtest" nil "gtest")
											 ("gnn" "std::generate_n(std::begin(${1:container}), $2, []($3) {\n  `%`$4\n});" "generate_n" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/generate_n" nil nil)
											 ("gnr" "std::generate(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});" "generate" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/generate" nil nil)
											 ("function" "${1:void} ${2:Class}::${3:name}($4)${5: const} {\n    $0\n}" "function" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/function" nil nil)
											 ("f" "${1:void} ${2:name}($3)$0" "fun_declaration" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/fun_declaration" nil "f")
											 ("fr" "friend $0;" "friend" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/friend" nil "fr")
											 ("forit" "for (${1:iter}=${2:var}.begin(); $1!=$2.end(); ++$1) {\n    `%`$0\n}" "for iterator loop" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/for_iterator" nil "forit")
											 ("fore" "std::for_each(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});" "for each loop" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/for_each" nil "fore")
											 ("fixt" "BOOST_FIXTURE_TEST_SUITE( ${1:name}, ${2:Fixture} )\n\n$0\n\nBOOST_AUTO_TEST_SUITE_END()" "fixture" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/fixture" nil "fixt")
											 ("fni" "auto pos = std::find_if(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n});\nif (pos != std::end($1)) {\n  $4\n}" "find_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/find_if" nil nil)
											 ("ffo" "auto pos = std::find_first_of(\n  std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3)\n);\nif (pos != std::end($1)) {\n  `%`$4\n}" "find_first_of" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/find_first_of" nil nil)
											 ("fne" "auto pos = std::find_std::end(\n  std::begin(${1:container}), std::end($1),\n  std::begin($2), std::end($3)\n);\nif (pos != std::end($1)) {\n  `%`$4\n}" "find_end" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/find_end" nil nil)
											 ("fnd" "auto pos = std::find(std::begin(${1:container}), std::end($1), $2);\nif (pos != std::end($1)) {\n  `%`$3\n}" "find" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/find" nil nil)
											 ("fin" "auto pos = std::find_if_not(std::begin(${1:container}), std::end($1),[]($2) {\n  $3\n});\nif (pos != std::end($1)) {\n  $4\n}\n$0\n" "find_if_not" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/fin" nil nil)
											 ("fln" "std::fill_n(std::begin(${1:container}), $2, $3);" "fill_n" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/fill_n" nil nil)
											 ("fil" "std::fill(std::begin(${1:container}), std::end($1), $2);" "fill" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/fill" nil nil)
											 ("erf" "${1:container}.erase($1.find_last_not_of(\" \\t\\n\\r\") + 1);" "generate_n" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/erase_find_last_not_of" nil nil)
											 ("erm" "${1:container}.erase(std::remove(std::begin($1), std::end($1), $2), std::end($1));" "remove" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/erase" nil nil)
											 ("eql" "if (std::equal(std::begin(${1:container}), std::end($1), std::begin($2))) {\n  `%`$3\n}" "equal" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/equal" nil nil)
											 ("enum" "enum ${1:NAME} {$0};" "enum" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/enum" nil nil)
											 ("cast" "check_and_cast<${1:Type} *>(${2:msg});" "dynamic_casting" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/dynamic_casting" nil "cast")
											 ("/**" "/**\n * $0\n */" "doc" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/doc" nil "/**")
											 ("dla" "delete[] ${1:arr};" "delete[]" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/delete[]" nil "dla")
											 ("dl" "delete ${1:pointer};" "delete" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/delete" nil "dl")
											 ("<<" "friend std::ostream& operator<<(std::ostream&, const ${1:Name}&);" "d_operator<<" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/d_operator_ostream" nil nil)
											 (">>" "friend std::istream& operator>>(std::istream&, const ${1:Name}&);" "d_operator>>" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/d_operator_istream" nil nil)
											 ("c[" "const ${1:Type}& operator[](${2:int index}) const;" "d_operator[]_const" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/d_operator[]_const" nil "c[")
											 ("[" "${1:Type}& operator[](${2:int index});" "d_operator[]" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/d_operator[]" nil "[")
											 ("<<" "friend std::ostream& operator<<(std::ostream&, const ${1:Class}&);" "d_operator<<" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/d_operator" nil "<<")
											 ("d+=" "${1:MyClass}& operator+=(${2:const $1 &});" "d+=" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/d+=" nil "d+=")
											 ("cstd" "#include <cstdlib>" "cstd" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/cstd" nil "cstd")
											 ("out" "`(setq --cpp-ns (if (doom-snippets-c++-using-std-p) \"\" \"std::\"))\n--cpp-ns`cout << `%`$1 << `--cpp-ns`endl;`(progn (makunbound '--cpp-ns) \"\")`" "cout" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/cout" nil "out")
											 ("count_if" "auto n = std::count_if(std::begin(${1:container}), std::end($1), []($2) {\n  $3\n});" "count_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/count_if" nil nil)
											 ("cnt" "auto n = std::count(std::begin(${1:container}), std::end($1), $2);" "count" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/count" nil nil)
											 ("oit" "std::copy(std::begin(${1:container}), std::end($1), std::ostream_iterator<$2>{\n%\\istd::cout, \"$3\"\n});" "copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/copy_ostream_iter" nil nil)
											 ("cpn" "std::copy_n(std::begin(${1:container}), $2, std::end($1));" "copy_n" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/copy_n" nil nil)
											 ("cpi" "std::copy_if(std::begin(${1:container}), std::end($1), std::begin($2),\n[]($3) {\n  $4\n});" "copy_if" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/copy_if" nil nil)
											 ("cpb" "std::copy_backward(std::begin(${1:container}), std::end($1), std::end($1));" "copy_backward" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/copy_backward" nil nil)
											 ("cpy" "std::copy(std::begin(${1:container}), std::end($1), std::begin($2));" "copy" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/copy" nil nil)
											 ("ct" "${1:Class}::$1(${2:args}) ${3: : ${4:init}} {\n    $0\n}" "constructor" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/constructor" nil "ct")
											 ("c[" "const ${1:Type}& operator[](${2:int index}) const\n{\n        $0\n}" "const_[]" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/const_[]" nil "c[")
											 ("cls11" "class ${1:Name}\n{\npublic:\n${2:  ${3://! Default constructor\n  }${1:$(doom-snippets-c++-class-name yas-text)}()${4:;$(doom-snippets-c++-class-method-decl-choice)}\n\n}${5:  ${6://! Copy constructor\n  }${1:$(doom-snippets-c++-class-name yas-text)}(const ${1:$(doom-snippets-c++-class-name yas-text)} &other)${7:;$(doom-snippets-c++-class-method-decl-choice)}\n\n}${8:  ${9://! Move constructor\n  }${1:$(doom-snippets-c++-class-name yas-text)}(${1:$(doom-snippets-c++-class-name yas-text)} &&other)${10: noexcept}${11:;$(doom-snippets-c++-class-method-decl-choice)}\n\n}${12:  ${13://! Destructor\n  }${14:virtual }~${1:$(doom-snippets-c++-class-name yas-text)}()${15: noexcept}${16:;$(doom-snippets-c++-class-method-decl-choice)}\n\n}${17:  ${18://! Copy assignment operator\n  }${1:$(doom-snippets-c++-class-name yas-text)}& operator=(const ${1:$(doom-snippets-c++-class-name yas-text)} &other)${19:;$(doom-snippets-c++-class-method-decl-choice)}\n\n}${20:  ${21://! Move assignment operator\n  }${1:$(doom-snippets-c++-class-name yas-text)}& operator=(${1:$(doom-snippets-c++-class-name yas-text)} &&other)${22: noexcept}${23:;$(doom-snippets-c++-class-method-decl-choice)}\n\n}$0\n\nprotected:\nprivate:\n};" "class11" nil
												("c++11")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/class11" nil "d7c41f87-9b8a-479d-bb12-89f4cbdd46a7")
											 ("class" "class ${1:Name} {\n    public:\n        ${1:$(yas/substr yas-text \"[^: ]*\")}();\n        ${2:virtual ~${1:$(yas/substr yas-text \"[^: ]*\")}();}\n    $0\n};" "class" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/class" nil nil)
											 ("cin" "`(setq --cpp-ns (if (doom-snippets-c++-using-std-p) \"\" \"std::\"))\n--cpp-ns`cin >> ${1:string};" "cin" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/cin" nil nil)
											 ("err" "`(setq --cpp-ns (if (doom-snippets-c++-using-std-p) \"\" \"std::\"))\ncerr` << `%`$1 << `--cpp-ns`endl;`(progn (makunbound '--cpp-ns) \"\")`" "cerr" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/cerr" nil "err")
											 ("req" "BOOST_REQUIRE( ${1:condition} );\n$0" "boost_require" nil
												("boost")
												nil "/home/arjen/.config/emacs/snippets/c++-mode/boost_require" nil "req")
											 ("beginend" "${1:v}.begin(), $1.end()" "v.begin(), v.end()" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/beginend" nil "beginend")
											 ("assert" "assert($0);" "assert" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/assert" nil nil)
											 ("ano" "if (std::any_of(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n})) {\n  $4\n}" "any_of" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/any_of" nil nil)
											 ("alo" "if (std::all_of(std::begin(${1:container}), std::end($1), []($2) {\n  `%`$3\n})) {\n  $4\n}" "all_of" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/all_of" nil nil)
											 ("ajf" "auto pos = std::adjacent_find(std::begin(${1:container}), std::end($1));\nif (pos != std::end($1)) {\n  $2\n}" "adjacent_find" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/adjacent_find" nil nil)
											 ("acl" "auto sum = std::accumulate(std::begin(${1:container}), std::end($1), 0, [](int total, $2) {\n  `%`$3\n});" "accumulate w/ closure" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/accumulate-with-closure" nil nil)
											 ("acm" "auto sum = std::accumulate(std::begin(${1:container}), std::end($1), 0);" "accumulate" nil nil nil "/home/arjen/.config/emacs/snippets/c++-mode/accumulate" nil nil)))


;;; Do not edit! File generated at Tue Dec 26 10:44:48 2023
