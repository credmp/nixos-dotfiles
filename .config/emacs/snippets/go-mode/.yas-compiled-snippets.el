;;; Compiled snippets and support files for `go-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'go-mode
										 '(("wr" "w http.ResponseWriter, r *http.Request" "http request writer" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/wr" nil nil)
											 ("while" "for $1 {\n    `%`$0\n}" "for ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/while" nil nil)
											 ("var" "var ${1:name} ${2:type} = ${3:value}$0" "var" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/var" nil nil)
											 ("type" "type ${1:name} ${2:struct | interface} {\n    `%`$0\n}" "type ... ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/type" nil nil)
											 ("test" "func Test${1:Name}(${2:t *testing.T}) {\n    `%`$0\n}" "func Test...() { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/test" nil nil)
											 ("switch" "switch ${1:express}{\n    case ${2:cond}:\n         $0\n}" "switch" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/switch" nil "switch")
											 ("struct" "type ${1:name} struct {\n    `%`$0\n}" "type ... struct { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/struct" nil nil)
											 ("select" "select {\n      case ${1:cond}:\n      $0\n}\n" "select" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/select" nil nil)
											 ("prln" "fmt.Println(\"${1:msg}\")$0\n" "println (short)" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/prln" nil nil)
											 ("println" "fmt.Println(\"${1:msg}\")$0\n" "println" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/println" nil nil)
											 ("printf" "fmt.Printf(\"$1\\n\"${2:, ${3:str}})" "printf" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/printf" nil nil)
											 ("pr" "fmt.Printf(\"$1\\n\"${2:, ${3:str}})" "printf" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/pr" nil nil)
											 ("pkg" "package ${1:`(car (last (split-string (file-name-directory buffer-file-name) \"/\") 2))`}" "package (short)" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/pkg" nil nil)
											 ("package" "package ${1:`(car (last (split-string (file-name-directory buffer-file-name) \"/\") 2))`}" "package" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/package" nil nil)
											 ("method" "func (${1:target}) ${2:name}(${3:args}) ${4:return type}{\n    $0\n}" "func (target) name(args) (results) { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/method" nil nil)
											 ("map" "map[${1:KeyType}]${2:ValueType}" "map" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/map" nil nil)
											 ("main" "func main() {\n   $0\n}" "func main() { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/main" nil nil)
											 ("interface" "type $1 interface {\n    `%`$0\n}\n" "type ... interface { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/interface" nil nil)
											 ("import" "import (\n    ${1:package}$0\n)" "import" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/import" nil nil)
											 ("imp" "import (\n    ${1:package}$0\n)" "import" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/imp" nil nil)
											 ("iferr" "if err != nil {\n    `%`$0\n}" "if err != nil { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/iferr" nil nil)
											 ("ife" "if ${1:condition} {\n	`%`$2\n} else {\n	$0\n}" "if ... { ... } else { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/ife" nil nil)
											 ("if" "if ${1:condition} {\n	`%`$0\n}" "if ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/if" nil nil)
											 ("gofunc" "go func (${1:args}) {\n    $0\n}(${2:values})\n" "go func (short)" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/gofunc" nil nil)
											 ("gof" "go func (${1:args}) {\n    $0\n}(${2:values})\n" "go func" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/gof" nil nil)
											 ("go" "go ${1:func}(${2:args})$0\n" "go" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/go" nil nil)
											 ("func" "func ${1:name}(${2:args}) ${3:return type}{\n    `%`$0\n}" "func ...(...) ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/func" nil nil)
											 ("forw" "for $1 {\n    `%`$0\n}" "for ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/forw" nil nil)
											 ("fori" "for ${1:i} := ${2:0}; $1 < ${3:10}; $1++ {\n    $0\n}" "for i := 0; i < n; i++ { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/fori" nil nil)
											 ("foreach" "for ${1:key}, ${2:value} := range ${3:target} {\n    `%`$0\n}" "for key, value := range ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/foreach" nil nil)
											 ("fore" "for ${1:key}, ${2:value} := range ${3:target} {\n    `%`$0\n}" "for key, value := range ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/fore" nil nil)
											 ("for" "for $1 {\n    `%`$0\n}" "for ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/for" nil nil)
											 ("fm" "func (${1:target}) ${2:name}(${3:args}) ${4:return type}{\n    $0\n}" "func (target) name(args) (results) { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/fm" nil nil)
											 ("f" "func ${1:name}(${2:args}) ${3:return type}{\n    `%`$0\n}" "func ...(...) ... { ... }" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/f" nil nil)
											 ("ctxc" "ctx context.Context" "ctx context.Context" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/ctxc" nil nil)
											 ("const" "const ${1:name} ${2:type} = ${3:value}$0" "const ... = ..." nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/const" nil nil)
											 (":=" "${1:x} := ${2:`%`}" "... := ..." nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/coloneq" nil ":=")
											 ("append" "${1:type} = append($1, ${2:elems})\n" "append" nil nil nil "/home/arjen/.config/emacs/snippets/go-mode/append" nil nil)))


;;; Do not edit! File generated at Tue Dec 26 10:44:48 2023
